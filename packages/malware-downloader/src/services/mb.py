from pathlib import Path
from tempfile import NamedTemporaryFile

from lib.logger import get_logger
from lib.utils import shorten
from lib.wrappers import ratelimiter, save_to, skip_if
from malwarebazaar import Bazaar

MB_METADATA = "malwarebazaar.json"
MB_RATELIMITS = {
    "daily": (2_000, 86_400),
}

_client = None
mb_ratelimit_min = ratelimiter(*MB_RATELIMITS["daily"])
logger = get_logger(__name__)


def set_apikey(apikey: str):
    global _client
    _client = Bazaar(apikey)


def get_client():
    return _client


@mb_ratelimit_min
@skip_if(lambda hash, path: Path(path).joinpath(hash, f"{hash}.zip").exists())
@save_to(lambda hash, path: Path(path).joinpath(hash, f"{hash}.zip"))
def download_sample(hash: str, path: Path):
    logger.info(f"Retrieving file for {shorten(hash)}")
    data = _client.download_file(hash)

    if not data:
        logger.warning("Sample not found.")
        return None

    with NamedTemporaryFile(delete=False) as tmp:
        tmp.write(data)
        return str(tmp.name)


@skip_if(lambda hash, path: Path(path).joinpath(hash, MB_METADATA).exists())
@save_to(lambda hash, path: Path(path).joinpath(hash, MB_METADATA))
def download_metadata(hash: str, path: Path):
    logger.info(f"Retrieving metadata for {shorten(hash)}")
    return _client.query_hash(hash)
