import inspect
import itertools
from typing import Annotated

import services.mb as svc
import typer
from lib.callbacks import apikey_callback, hashes_callback, verbose_callback
from lib.logger import get_logger
from lib.utils import run_operation

logger = get_logger(__name__)
app = typer.Typer(no_args_is_help=True, pretty_exceptions_show_locals=False)


@app.command()
def download(
    ctx: typer.Context,
    hashes: Annotated[
        str,
        typer.Option(
            callback=hashes_callback,
            help="Comma-separated list of hashes or a file path.",
        ),
    ],
    apikey: Annotated[
        str,
        typer.Option(
            callback=apikey_callback,
            envvar=["MB_API_KEY", "API_KEY"],
            prompt=True,
            hide_input=True,
            help="MalwareBazaar API key.",
        ),
    ],
    sample: Annotated[
        bool, typer.Option(help="Download the sample from MalwareBazaar.")
    ] = False,
    metadata: Annotated[
        bool, typer.Option(help="Download metadata from MalwareBazaar.")
    ] = False,
    output: Annotated[str, typer.Option(help="")] = "output",
    verbose: Annotated[
        int, typer.Option("--verbose", "-v", count=True, callback=verbose_callback)
    ] = 0,
):
    """Download data from MalwareBazaar for one or more hashes."""
    logger.debug(f"Download command invoked with {len(hashes)} hashes")
    logger.debug(f"Output directory set to: '{output}'")

    selected_ops = [
        fn
        for name, fn in inspect.getmembers(svc, inspect.isfunction)
        if name.startswith("download_")
        and ctx.params.get(name.removeprefix("download_"))
    ]

    for h, op in itertools.product(hashes, selected_ops):
        run_operation(op, h, output)
